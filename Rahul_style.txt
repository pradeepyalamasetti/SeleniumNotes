1. Introduction to the Project

         step 1: Create Maven Project 
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Create Maven project in Eclipse
	File--> Other--> Maven project.(or)
	Right Click ---- New ---- Project -- Maven ---- Maven project ---- 
	create simple project --- Project id name (two times) --- finish

2. Live Project 1 Code with Updated and Latest Dependencies
3. Creating a new Maven Project

          step 2: Update POM.xml file required dependencies and plugins
          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          step 3: Install plugins and dependencies for Maven Project 
          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          Click on Project folder ----- Maven ---update project --- force update ---- OK
          step 4: Add TestNG  for Maven Project 
          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          Introduction to TestNG & Annotations in TestNG(pavan)
          Eclipse inside ----- help ---- eclipse market place ---- serach(TestNG for eclipse)--- install
          Right click ----- properties -------Java build path ---- add Library ----- TestNG --- next ---Finish

          step 5: Create All Files and Folders
          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          src/test/java --packages
                         listeners ----  
			 rough    ------
                         testBase--------- BaseClass.java(----Main file)
                         testCases ------ 
                         utilities ------Dataproviders.java
                                         ExcelUtility.java
                                         ExtentReportManager.java

          src/test/resources -- packages
                                log4j2.xml   (<Property name="basePath">./logs</Property>) 
                                config.properties
          logs
	  reports
	  screenshots
	  testData(excel)
          pom.xml
          all xml files





4. Creating Base Class
		 step 6: Create PageObjects(3)--- constructor(mutiple times) ---  Setup single Browser(1) ----  Create the first test cases(1)
                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		1.testBase package  ----- BaseClass.java
                ---------------------------------------------------------
package testBase;

import java.time.Duration;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import io.github.bonigarcia.wdm.WebDriverManager;

public class BaseClass {

	public static WebDriver driver;

	@BeforeClass
	public void setup()
	{
		
		WebDriverManager.chromedriver().setup(); // Not required selenium 4.6.0 later versions
		driver=new ChromeDriver();
	
	
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

		driver.get("https://www.way2automation.com/angularjs-protractor/banking/#/login");
		driver.manage().window().maximize();
	}
	
	@AfterClass
	public void tearDown()
	{
		driver.quit();
	}
	
}

		2.src/test/resources -----Config.properties
		-------------------------------------------
testurl = https://www.way2automation.com/angularjs-protractor/banking/#/login





5. Calling Properties and creating the very first test case
              step 6: Create PageObjects(3)--- constructor(mutiple times) ---  Setup single Browser(1) ----  Create the first test cases(1)
	      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		1.testBase package -----BaseClass.java
		--------------------------------------
package testBase;


import java.time.Duration;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import io.github.bonigarcia.wdm.WebDriverManager;
import org.testng.annotations.Parameters;


public class BaseClass {

	public static WebDriver driver;

	@BeforeClass
	@Parameters("browser")   // getting browser parameter from testng.xml
	public void setup(String browse)
	{
		
		//launch right browser based on parameter
		if (browse.equals("chrome")) 
		   {
			driver = new ChromeDriver();
		   } 
		else if (browse.equals("edge"))
		   {
			driver = new EdgeDriver();
		   } 
		else 
		   {
			driver = new ChromeDriver();
		   }
	
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

		driver.get("https://www.way2automation.com/angularjs-protractor/banking/#/login");
		driver.manage().window().maximize();
	}
	
	@AfterClass
	public void tearDown()
	{
		driver.quit();
	}
	

}
 
		2.testCases package ---- LoginTest.java
		----------------------------------------
package testCases;

import org.openqa.selenium.By;
import org.testng.annotations.Test;

import testBase.BaseClass;

public class TC_001_LoginTest extends BaseClass{
	
	@Test
	public void loginAsbankManager() throws InterruptedException
	{
		driver.findElement(By.cssSelector("div > div:last-child > .btn.btn-primary.btn-lg")).click();
		Thread.sleep(3000);
	}


}

		3.testng.xml
		---------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Data Driven Test">
  <test thread-count="5" name="LoginTest">
	   <parameter name="browser" value="chrome" />    <!-- passing browser parameter to BaseClass ->Setup() -->
    <classes>
      <class name="testCases.LoginTest"/>
    </classes>
  </test> <!-- Test -->
</suite> <!-- Suite -->






6. Initializing logs
  		    step 7 : Adding the log file or log4j2 API or libray
    		     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                       log4j-core
		       log4j-api
 
 
               <!-- 7 -->
	       <!--https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>3.0.0-alpha1</version>
		</dependency>
		
		<!-- 8 -->
		<!--https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>3.0.0-alpha1</version>
		</dependency>
 
 
			1. src/test/resources --- create file log4j2.xml file---Logger
		 -------------------------------------------------------------------------------
 <?xml version="1.0" encoding="UTF-8"?>
 <Configuration status="WARN"> 

<Properties>
		  <Property name="basePath">./logs</Property>
	</Properties>


  <Appenders>
    <Console name="Console" target="SYSTEM_OUT">
      <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
    </Console>
    
      <RollingFile name="File" fileName="${basePath}/automation.log" filePattern="${basePath}/automation-%d{yyyy-MM-dd}.log">
     <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
      <SizeBasedTriggeringPolicy size="50000" />
   </RollingFile>
    
    
  </Appenders>
  
  <Loggers>
    <Root level="Info"><!-- Here you can use multiple log levels All < Trace < Debug < Info < Warn < Error < Fatal < Off -->
      <AppenderRef ref="File"/>  <!-- <AppenderRef ref="Console"/> -->
    </Root>
  </Loggers>
  
</Configuration>


			2. src/test/java ----- testBase package ---- BaseClass.java
			----------------------------------------------------------
package testBase;


import java.time.Duration;


import org.apache.commons.lang3.RandomStringUtils;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import io.github.bonigarcia.wdm.WebDriverManager;
import org.testng.annotations.Parameters;


public class BaseClass {

	public static WebDriver driver;
	public Logger logger; // for logging

	@BeforeClass
	@Parameters("browser")   // getting browser parameter from testng.xml
	public void setup(String browse)
	{
		logger=LogManager.getLogger(this.getClass());  //logging
		
		//launch right browser based on parameter
		if (browse.equals("chrome")) 
		   {
			driver = new ChromeDriver();
		   } 
		else if (browse.equals("edge"))
		   {
			driver = new EdgeDriver();
		   } 
		else 
		   {
			driver = new ChromeDriver();
		   }
	
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

		driver.get("https://www.way2automation.com/angularjs-protractor/banking/#/login");
		driver.manage().window().maximize();
	}
	
	@AfterClass
	public void tearDown()
	{
		driver.quit();
	}
	

}
 

			3.src/test/java ----testCases ---- TC_001_LoginTest.java
			---------------------------------------------------------
package testCases;

import org.openqa.selenium.By;
import org.testng.annotations.Test;

import testBase.BaseClass;

public class TC_001_LoginTest extends BaseClass{
	
	@Test
	public void loginAsbankManager() throws InterruptedException
	{
		logger.debug("application logs......");
		logger.info("***  Starting TC_001_LoginTest ***");
		
		driver.findElement(By.cssSelector("div > div:last-child > .btn.btn-primary.btn-lg")).click();
		logger.info("Clicked on Bank Manager Login button");
		Thread.sleep(3000);
		
		logger.info("***  Finished TC_001_LoginTest ***");
	}


}

	4.(testng.xml)  ---- Go to TC_001_LoginTest.java---- Run as ---Test NG Test --- you will see output(Direct execute fie)---logs(automation.log)
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


7. Adding Assertions
			1.TC_001_LoginTest.java ----- Adding Assertions
			-----------------------------------------------
package testCases;

import org.testng.Assert;

import java.time.Duration;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.Test;

import testBase.BaseClass;

public class TC_001_LoginTest extends BaseClass{
	
	@Test
	public void loginAsbankManager() throws InterruptedException
	{
		logger.debug("application logs......");
		logger.info("***  Starting TC_001_LoginTest ***");
		
		driver.findElement(By.cssSelector("div > div:last-child > .btn.btn-primary.btn-lg")).click();
		logger.info("Clicked on Bank Manager Login button");
		
		
		driver.findElement(By.xpath("//button[@ng-click=\"addCust()\"]")).click();
		
	
		//Assert.assertEquals(confmsg, "Your Account Has Been Created!","Test failed");
		
		//Adding Assertions
		//Assert.assertTrue(isElementPresent(By.xpath("//button[@ng-click=\"addCust()\"]")),"Login not successfully");
		
		boolean isElementDisplayed = isElementPresent(By.xpath("//button[@ng-click=\"addCust()\"]"));
		System.out.println("Element is present: " + isElementDisplayed);
		Assert.assertTrue(isElementDisplayed, "Login not successful");
		

		Thread.sleep(3000);
		
		logger.info("***  Finished TC_001_LoginTest ***");
	}


}


			2.BaseClass.java ----- (Nothing is add -- Adding Assertions)
			------------------------------------------------------------

package testBase;

import java.time.Duration;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import io.github.bonigarcia.wdm.WebDriverManager;
import org.testng.annotations.Parameters;


public class BaseClass {

	public static WebDriver driver;
	public Logger logger; // for logging

	@BeforeClass
	@Parameters("browser")   // getting browser parameter from testng.xml
	public void setup(String browse)
	{
		logger=LogManager.getLogger(this.getClass());  //logging
		
		//launch right browser based on parameter
		if (browse.equals("chrome")) 
		   {
			driver = new ChromeDriver();
		   } 
		else if (browse.equals("edge"))
		   {
			driver = new EdgeDriver();
		   } 
		else 
		   {
			driver = new ChromeDriver();
		   }
	
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

		driver.get("https://www.way2automation.com/angularjs-protractor/banking/#/login");
		//driver.get("https://www.way2automation.com/angularjs-protractor/banking/#/manager");
		driver.manage().window().maximize();
	}
	
	
	public boolean isElementPresent(By by)
	{
		try
		{
			driver.findElement(by);
			return true;
		}
		catch(NoSuchElementException e)
		{
			return false;
		}
	}
	
	
	
	
	@AfterClass
	public void tearDown()
	{
		driver.quit();
	}
	

}
				3. testng.xml
				---------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Data Driven Test">
  <test thread-count="5" name="LoginTest">
	   <parameter name="browser" value="chrome" />    <!-- passing browser parameter to BaseClass ->Setup() -->
    <classes>
      <class name="testCases.TC_001_LoginTest"/>
    </classes>
  </test> <!-- Test -->
</suite> <!-- Suite -->




8. Adding Data Provider and Creating the second test(small Doubt)

				1.TC_002_AddCustomerLoginTest.java
				------------------------------------
package testCases;

import java.io.IOException;
import java.time.Duration;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import testBase.BaseClass;
import utilities.XLUtility;



public class TC_002_AddCustomerLoginTest extends BaseClass {
	
	@Test(dataProvider = "LoginData")
	public void addCustomer(String firstname,String lastname,String postcode,String alerttext) 
	{
		driver.findElement(By.cssSelector("div > div:last-child > .btn.btn-primary.btn-lg")).click();
		logger.info("Clicked on Bank Manager Login button");
		
		
		driver.findElement(By.xpath("//button[@ng-click=\"addCust()\"]")).click();
		
		WebElement txtFirstname = driver.findElement(By.xpath("//input[@placeholder=\"First Name\"]"));
		txtFirstname.clear();
		txtFirstname.sendKeys(firstname);
		
		
		WebElement txtLastname = driver.findElement(By.xpath("//input[@placeholder=\"Last Name\"]"));
		txtLastname.clear();
		txtLastname.sendKeys(lastname);
		
		WebElement  txtPostCode =  driver.findElement(By.xpath("//input[@placeholder=\"Post Code\"]"));
		txtPostCode.clear();
		txtPostCode.sendKeys(postcode);

		 driver.findElement(By.xpath("//button[@type=\"submit\"]")).click(); //add customer button
		 
		// WebDriverWait wait = new WebDriverWait(driver, 5); // Create WebDriverWait object with a timeout of 5 seconds
		// Alert alert = wait.until(ExpectedConditions.alertIsPresent());

         WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
         Alert alert = wait.until(ExpectedConditions.alertIsPresent());
	        
		  Assert.assertTrue(alert.getText().contains(alerttext));

		    alert.accept();
		
	}
	
	@DataProvider(name="LoginData")
	public String [][] getData() throws IOException
	{
		/*String loginData[][]= {
					{"admin@yourstore.com","admin","Valid"},
					{"admin@yourstore.com","adm","Invalid"},
					{"adm@yourstore.com","admin","Invalid"},
					{"adm@yourstore.com","adm","Invalid"}
							};*/
		
		//get the data from excel
		String path=".\\testData\\AddCustomers_LoginData.xlsx";
		XLUtility xlutil=new XLUtility(path);
		
		int totalrows=xlutil.getRowCount("Sheet1");
		int totalcols=xlutil.getCellCount("Sheet1",1);	
				
		String loginData[][]=new String[totalrows][totalcols];
			
		
		for(int i=1;i<=totalrows;i++) //1
		{
			for(int j=0;j<totalcols;j++) //0
			{
				loginData[i-1][j]=xlutil.getCellData("Sheet1", i, j);
			}
				
		}
		
		return loginData;
	}

}

			2.utilities package --- XLUtility.file add
			-------------------------------------------
package utilities;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class XLUtility {

	public FileInputStream fi;
	public FileOutputStream fo;
	public XSSFWorkbook workbook;
	public XSSFSheet sheet;
	public XSSFRow row;
	public XSSFCell cell;
	public CellStyle style;   
	String path;
	
	public XLUtility(String path)
	{
		this.path=path;
	}
		
	public int getRowCount(String sheetName) throws IOException 
	{
		fi=new FileInputStream(path);
		workbook=new XSSFWorkbook(fi);
		sheet=workbook.getSheet(sheetName);
		int rowcount=sheet.getLastRowNum();
		workbook.close();
		fi.close();
		return rowcount;		
	}
	

	public int getCellCount(String sheetName,int rownum) throws IOException
	{
		fi=new FileInputStream(path);
		workbook=new XSSFWorkbook(fi);
		sheet=workbook.getSheet(sheetName);
		row=sheet.getRow(rownum);
		int cellcount=row.getLastCellNum();
		workbook.close();
		fi.close();
		return cellcount;
	}
	
	
	public String getCellData(String sheetName,int rownum,int colnum) throws IOException
	{
		fi=new FileInputStream(path);
		workbook=new XSSFWorkbook(fi);
		sheet=workbook.getSheet(sheetName);
		row=sheet.getRow(rownum);
		cell=row.getCell(colnum);
		
		DataFormatter formatter = new DataFormatter();
		String data;
		try{
		data = formatter.formatCellValue(cell); //Returns the formatted value of a cell as a String regardless of the cell type.
		}
		catch(Exception e)
		{
			data="";
		}
		workbook.close();
		fi.close();
		return data;
	}
	
	public void setCellData(String sheetName,int rownum,int colnum,String data) throws IOException
	{
		File xlfile=new File(path);
		if(!xlfile.exists())    // If file not exists then create new file
		{
		workbook=new XSSFWorkbook();
		fo=new FileOutputStream(path);
		workbook.write(fo);
		}
				
		fi=new FileInputStream(path);
		workbook=new XSSFWorkbook(fi);
			
		if(workbook.getSheetIndex(sheetName)==-1) // If sheet not exists then create new Sheet
			workbook.createSheet(sheetName);
		
		sheet=workbook.getSheet(sheetName);
					
		if(sheet.getRow(rownum)==null)   // If row not exists then create new Row
				sheet.createRow(rownum);
		row=sheet.getRow(rownum);
		
		cell=row.createCell(colnum);
		cell.setCellValue(data);
		fo=new FileOutputStream(path);
		workbook.write(fo);		
		workbook.close();
		fi.close();
		fo.close();
	}
	
	
	public void fillGreenColor(String sheetName,int rownum,int colnum) throws IOException
	{
		fi=new FileInputStream(path);
		workbook=new XSSFWorkbook(fi);
		sheet=workbook.getSheet(sheetName);
		
		row=sheet.getRow(rownum);
		cell=row.getCell(colnum);
		
		style=workbook.createCellStyle();
		
		style.setFillForegroundColor(IndexedColors.GREEN.getIndex());
		style.setFillPattern(FillPatternType.SOLID_FOREGROUND); 
				
		cell.setCellStyle(style);
		workbook.write(fo);
		workbook.close();
		fi.close();
		fo.close();
	}
	
	
	public void fillRedColor(String sheetName,int rownum,int colnum) throws IOException
	{
		fi=new FileInputStream(path);
		workbook=new XSSFWorkbook(fi);
		sheet=workbook.getSheet(sheetName);
		row=sheet.getRow(rownum);
		cell=row.getCell(colnum);
		
		style=workbook.createCellStyle();
		
		style.setFillForegroundColor(IndexedColors.RED.getIndex());
		style.setFillPattern(FillPatternType.SOLID_FOREGROUND);  
		
		cell.setCellStyle(style);		
		workbook.write(fo);
		workbook.close();
		fi.close();
		fo.close();
	}
	
}

		3.Create testData folder ---- inside add excel file with Data
		-------------------------------------------------------------

		4.testng.xml file
		------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Data Driven Test">
  <test thread-count="5" name="LoginTest">
	   <parameter name="browser" value="chrome" />    <!-- passing browser parameter to BaseClass ->Setup() -->
    <classes>
  <!-- <class name="testCases.TC_001_LoginTest"/>  -->
    </classes>
  </test> <!-- Test -->
  
   <test thread-count="5" name="AddCustomerLoginTest">
	   <parameter name="browser" value="chrome" />    <!-- passing browser parameter to BaseClass ->Setup() -->
    <classes>
      <class name="testCases.TC_002_AddCustomerLoginTest"/>
    </classes>
  </test> 
</suite>



9. Implementing ReportNG 
				1.POM.xml file Add
				----------------------
	Add <artifactId>reportng</artifactId>
	Add <artifactId>guice</artifactId>


				2.testng.xml file Add
				----------------------
	<listeners>
		<listener class-name="org.uncommons.reportng.HTMLReporter" />
		<listener class-name="org.uncommons.reportng.JUnitXMLReporter" />
	</listeners>


				3.testng.xml file --run 
				------------------------
	After refresh to Project folder ----- go to test-output ---html folder--- index.html(see result) 


				 4.Customize to your massages and srceenshots
				---------------------------------------------
	System.setProperty("org.uncommons.reportng.escape-output", "false");

	Reporter.log("Customer Add successfully!!!");
	Reporter.log("<a target = \"_blank\" href=\"E:\\Screenshots\\error.jpg\">Screenshot</a>");
	Reporter.log("<br>");
	Reporter.log("<a target = \"_blank\" href=\"E:\\Screenshots\\error.jpg\"><img src=\"E:\\Screenshots\\error.jpg\" height=200 width=200></img></a>");
	


package testCases;

import java.io.IOException;
import java.time.Duration;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.Reporter;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import testBase.BaseClass;
import utilities.XLUtility;

public class TC_002_AddCustomerLoginTest extends BaseClass {
	
	@Test(dataProvider = "LoginData")
	public void addCustomer(String firstname,String lastname,String postcode,String alerttext) 
	{
		System.setProperty("org.uncommons.reportng.escape-output", "false");
		driver.findElement(By.cssSelector("div > div:last-child > .btn.btn-primary.btn-lg")).click();
		logger.info("Clicked on Bank Manager Login button");
		
		
		driver.findElement(By.xpath("//button[@ng-click=\"addCust()\"]")).click();
		
		WebElement txtFirstname = driver.findElement(By.xpath("//input[@placeholder=\"First Name\"]"));
		txtFirstname.clear();
		txtFirstname.sendKeys(firstname);
		
		
		WebElement txtLastname = driver.findElement(By.xpath("//input[@placeholder=\"Last Name\"]"));
		txtLastname.clear();
		txtLastname.sendKeys(lastname);
		
		WebElement  txtPostCode =  driver.findElement(By.xpath("//input[@placeholder=\"Post Code\"]"));
		txtPostCode.clear();
		txtPostCode.sendKeys(postcode);
		
		Reporter.log("Customer Add successfully!!!");
		Reporter.log("<a target = \"_blank\" href=\"E:\\Screenshots\\error.jpg\">Screenshot</a>");
		Reporter.log("<br>");
		Reporter.log("<a target = \"_blank\" href=\"E:\\Screenshots\\error.jpg\"><img src=\"E:\\Screenshots\\error.jpg\" height=200 width=200></img></a>");

		 driver.findElement(By.xpath("//button[@type=\"submit\"]")).click(); //add customer button
		 
		// WebDriverWait wait = new WebDriverWait(driver, 5); // Create WebDriverWait object with a timeout of 5 seconds
		// Alert alert = wait.until(ExpectedConditions.alertIsPresent());

         WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
         Alert alert = wait.until(ExpectedConditions.alertIsPresent());
	        
		  Assert.assertTrue(alert.getText().contains(alerttext));

		    alert.accept();
		
	}
	
	@DataProvider(name="LoginData")
	public String [][] getData() throws IOException
	{
		/*String loginData[][]= {
					{"admin@yourstore.com","admin","Valid"},
					{"admin@yourstore.com","adm","Invalid"},
					{"adm@yourstore.com","admin","Invalid"},
					{"adm@yourstore.com","adm","Invalid"}
							};*/
		
		//get the data from excel
		String path=".\\testData\\AddCustomers_LoginData.xlsx";
		XLUtility xlutil=new XLUtility(path);
		
		int totalrows=xlutil.getRowCount("Sheet1");
		int totalcols=xlutil.getCellCount("Sheet1",1);	
				
		String loginData[][]=new String[totalrows][totalcols];
			
		
		for(int i=1;i<=totalrows;i++) //1
		{
			for(int j=0;j<totalcols;j++) //0
			{
				loginData[i-1][j]=xlutil.getCellData("Sheet1", i, j);
			}
				
		}
		
		return loginData;
	}

}


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Data Driven Test">
	 <listeners>
		<!-- <listener class-name="utilities.ExtentReportManager" />-->
		<listener class-name="org.uncommons.reportng.HTMLReporter" />
		<listener class-name="org.uncommons.reportng.JUnitXMLReporter" />
	</listeners>
	
  <test thread-count="5" name="LoginTest">
	   <parameter name="browser" value="chrome" />    <!-- passing browser parameter to BaseClass ->Setup() -->
    <classes>
  <!-- <class name="testCases.TC_001_LoginTest"/>  -->
    </classes>
  </test> <!-- Test -->
  
   <test thread-count="5" name="AddCustomerLoginTest">
	   <parameter name="browser" value="chrome" />    <!-- passing browser parameter to BaseClass ->Setup() -->
    <classes>
      <class name="testCases.TC_002_AddCustomerLoginTest"/>
    </classes>
  </test> 
</suite>





10. Adding Listeners 



		1.Create Listeners package ---- under CustomerListeners file--- Add code below  CustomerListeners.java 
		-------------------------------------------------------------------------------------------------------
package Listeners;

import org.testng.ITestContext ;		
import org.testng.ITestListener ;		
import org.testng.ITestResult ;
import org.testng.Reporter;

public class CustomListeners implements ITestListener						
{		

   	
    public void onFinish(ITestContext arg0) {					
        // TODO Auto-generated method stub				
        		
    }		

   
    public void onStart(ITestContext arg0) {					
        // TODO Auto-generated method stub				
        		
    }		

 	
    public void onTestFailedButWithinSuccessPercentage(ITestResult arg0) {					
        // TODO Auto-generated method stub				
        		
    }		

  	
    public void onTestFailure(ITestResult arg0) {
    	
    	System.setProperty("org.uncommons.reportng.escape-output", "false");
		Reporter.log("Caputring Screenshot");
		Reporter.log("<a target = \"_blank\" href=\"E:\\Screenshots\\error.jpg\">Screenshot</a>");
		Reporter.log("<br>");
		Reporter.log("<a target = \"_blank\" href=\"E:\\Screenshots\\error.jpg\"><img src=\"E:\\Screenshots\\error.jpg\" height=200 width=200></img></a>");				
        		
    }		

   
    public void onTestSkipped(ITestResult arg0) {					
        // TODO Auto-generated method stub				
        		
    }		

  	
    public void onTestStart(ITestResult arg0) {					
        // TODO Auto-generated method stub				
        		
    }		

	
    public void onTestSuccess(ITestResult arg0) {					
        // TODO Auto-generated method stub				
        		
    }		
}		

					2.Adding Listeners to testng.xml file
					--------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Data Driven Test">
	 <listeners>
		<!-- <listener class-name="utilities.ExtentReportManager" />-->
		<listener class-name="org.uncommons.reportng.HTMLReporter" />
		<listener class-name="org.uncommons.reportng.JUnitXMLReporter" />
		<listener class-name="Listeners.CustomListeners" />
	</listeners>
	
  <test thread-count="5" name="LoginTest">
	   <parameter name="browser" value="chrome" />    <!-- passing browser parameter to BaseClass ->Setup() -->
    <classes>
  <!-- <class name="testCases.TC_001_LoginTest"/>  -->
    </classes>
  </test> <!-- Test -->
  
   <test thread-count="5" name="AddCustomerLoginTest">
	   <parameter name="browser" value="chrome" />    <!-- passing browser parameter to BaseClass ->Setup() -->
    <classes>
      <class name="testCases.TC_002_AddCustomerLoginTest"/>
    </classes>
  </test> 
</suite>


				3.testng.xml file ------run 
       			        4.see--- only failed case we add manual screenshot ---
            			     file:///C:/Users/win/eclipse-workspace/Rahul_Project_without_pageFactory/test-output/html/index.html

				5.TC_002_AddCustomerLoginTest.java
				-----------------------------------

package testCases;

import java.io.IOException;
import java.time.Duration;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.Reporter;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import testBase.BaseClass;
import utilities.XLUtility;

public class TC_002_AddCustomerLoginTest extends BaseClass {
	
	@Test(dataProvider = "LoginData")
	public void addCustomer(String firstname,String lastname,String postcode,String alerttext) 
	{
	     	try 
	     	{
			driver.findElement(By.cssSelector("div > div:last-child > .btn.btn-primary.btn-lg")).click();
			logger.info("Clicked on Bank Manager Login button");
			
			
			driver.findElement(By.xpath("//button[@ng-click=\"addCust()\"]")).click();
			
			WebElement txtFirstname = driver.findElement(By.xpath("//input[@placeholder=\"First Name\"]"));
			txtFirstname.clear();
			txtFirstname.sendKeys(firstname);
			
			
			WebElement txtLastname = driver.findElement(By.xpath("//input[@placeholder=\"Last Name\"]"));
			txtLastname.clear();
			txtLastname.sendKeys(lastname);
			
			WebElement  txtPostCode =  driver.findElement(By.xpath("//input[@placeholder=\"Post Code\"]"));
			txtPostCode.clear();
			txtPostCode.sendKeys(postcode);
			

			 driver.findElement(By.xpath("//button[@type=\"submit\"]")).click(); //add customer button
			 
			// WebDriverWait wait = new WebDriverWait(driver, 5); // Create WebDriverWait object with a timeout of 5 seconds
			// Alert alert = wait.until(ExpectedConditions.alertIsPresent());

	         WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
	         Alert alert = wait.until(ExpectedConditions.alertIsPresent());
		        
			  Assert.assertTrue(alert.getText().contains(alerttext));

			    alert.accept();
		 }
	     	catch(Exception e)
		  {
	     		 Assert.fail("Customer not added successfully");
		  }
		
		
		 
	}
	
	@DataProvider(name="LoginData")
	public String [][] getData() throws IOException
	{
		/*String loginData[][]= {
					  {"admin@yourstore.com","admin","Valid"},
					  {"admin@yourstore.com","adm","Invalid"},
					  {"adm@yourstore.com","admin","Invalid"},
					  {"adm@yourstore.com","adm","Invalid"}
							};*/
		
		//get the data from excel
		String path=".\\testData\\AddCustomers_LoginData.xlsx";
		XLUtility xlutil=new XLUtility(path);
		
		int totalrows=xlutil.getRowCount("Sheet1");
		int totalcols=xlutil.getCellCount("Sheet1",1);	
				
		String loginData[][]=new String[totalrows][totalcols];
			
		
		for(int i=1;i<=totalrows;i++) //1
		{
			for(int j=0;j<totalcols;j++) //0
			{
				loginData[i-1][j]=xlutil.getCellData("Sheet1", i, j);
			}
				
		}
		
		return loginData;
	}

}





11. Capturing Unique screenshots and report customization part 1

1.Add Plugin -- maven-surefire-plugin --- POM.mxl file
------------------------------------------------------
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.1.2</version>

				<!-- --><configuration>
				        <suiteXmlFiles>
						<suiteXmlFile>testng.xml</suiteXmlFile>
					</suiteXmlFiles>
				</configuration>
				</plugin>
			</plugins>

2.POM.xml file ---- right click and run --- Maven test --- see Build success or Build Failure
3.test-output --- html folder ---- index.html(you see nothing will be this time what you do)
4.target ----surefire-reports---html folder ---- index.html(you check this time)-- for report
			
				5.BaseClass.java
				-------------------

package testBase;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.Date;


import org.apache.commons.io.FileUtils;

import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import io.github.bonigarcia.wdm.WebDriverManager;
import org.testng.annotations.Parameters;


public class BaseClass {

	public static WebDriver driver;
	public Logger logger; // for logging

	@BeforeClass
	@Parameters("browser")   // getting browser parameter from testng.xml
	public void setup(String browse)
	{
		logger=LogManager.getLogger(this.getClass());  //logging
		
		//launch right browser based on parameter
		if (browse.equals("chrome")) 
		   {
			driver = new ChromeDriver();
		   } 
		else if (browse.equals("edge"))
		   {
			driver = new EdgeDriver();
		   } 
		else 
		   {
			driver = new ChromeDriver();
		   }
	
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

		driver.get("https://www.way2automation.com/angularjs-protractor/banking/#/login");
		//driver.get("https://www.way2automation.com/angularjs-protractor/banking/#/manager");
		driver.manage().window().maximize();
		
	}
	
	
	public boolean isElementPresent(By by)
	{
		try
		{
			driver.findElement(by);
			return true;
		}
		catch(NoSuchElementException e)
		{
			return false;
		}
	}
	
	
	
	
	@AfterClass
	public void tearDown()
	{
		driver.quit();
	}
	
	
	
	
	public static String screenshotPath;
	public static String screenshotName;
	
	
	public static String captureScreenshot() throws IOException 
	{	
		TakesScreenshot takesScreenshot = (TakesScreenshot) driver;
		File source = takesScreenshot.getScreenshotAs(OutputType.FILE);
		screenshotName = "error.jpg";
		String destination = System.getProperty("user.dir") + "\\target\\surefire-reports\\html\\" + screenshotName;
		
		try 
		{
			FileUtils.copyFile(source, new File(destination));
		} 
		catch (Exception e) 
		{
			e.getMessage();
		}
		return destination;

	}

}


			6.CustomListeners.java
			------------------------
package Listeners;

import java.io.IOException;

import org.testng.ITestContext ;		
import org.testng.ITestListener ;		
import org.testng.ITestResult ;
import org.testng.Reporter;

import testBase.BaseClass;

public class CustomListeners implements ITestListener						
{		

   	
    public void onFinish(ITestContext arg0) {					
        // TODO Auto-generated method stub				
        		
    }		

   
    public void onStart(ITestContext arg0) {					
        // TODO Auto-generated method stub				
        		
    }		

 	
    public void onTestFailedButWithinSuccessPercentage(ITestResult arg0) {					
        // TODO Auto-generated method stub				
        		
    }		

  	
    public void onTestFailure(ITestResult arg0) {
    	
    	System.setProperty("org.uncommons.reportng.escape-output", "false");
    	try {
			BaseClass.captureScreenshot();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	Reporter.log("Caputring Screenshot");
		Reporter.log("<a target = \"_blank\" href="+ BaseClass.screenshotName +">Screenshot</a>");
		Reporter.log("<br>");
		Reporter.log("<a target = \"_blank\" href="+ BaseClass.screenshotName +"><img src=href="+ BaseClass.screenshotName +" height=200 width=200></img></a>");				
        		
    }		

   
    public void onTestSkipped(ITestResult arg0) {					
        // TODO Auto-generated method stub				
        		
    }		

  	
    public void onTestStart(ITestResult arg0) {					
        // TODO Auto-generated method stub				
        		
    }		

	
    public void onTestSuccess(ITestResult arg0) {					
        // TODO Auto-generated method stub				
        		
    }		
}		



				7.TC_002_AddCustomerLoginTest.java
				-------------------------------------
package testCases;

import java.io.IOException;
import java.time.Duration;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.Reporter;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import testBase.BaseClass;
import utilities.XLUtility;

public class TC_002_AddCustomerLoginTest extends BaseClass {
	
	@Test(dataProvider = "LoginData")
	public void addCustomer(String firstname,String lastname,String postcode,String alerttext) 
	{
	     	try 
	     	{
			driver.findElement(By.cssSelector("div > div:last-child > .btn.btn-primary.btn-lg")).click();
			logger.info("Clicked on Bank Manager Login button");
			
			
			driver.findElement(By.xpath("//button[@ng-click=\"addCust()\"]")).click();
			
			WebElement txtFirstname = driver.findElement(By.xpath("//input[@placeholder=\"First Name\"]"));
			txtFirstname.clear();
			txtFirstname.sendKeys(firstname);
			
			
			WebElement txtLastname = driver.findElement(By.xpath("//input[@placeholder=\"Last Name\"]"));
			txtLastname.clear();
			txtLastname.sendKeys(lastname);
			
			WebElement  txtPostCode =  driver.findElement(By.xpath("//input[@placeholder=\"Post Code\"]"));
			txtPostCode.clear();
			txtPostCode.sendKeys(postcode);
			

			 driver.findElement(By.xpath("//button[@type=\"submit\"]")).click(); //add customer button
			 
			// WebDriverWait wait = new WebDriverWait(driver, 5); // Create WebDriverWait object with a timeout of 5 seconds
			// Alert alert = wait.until(ExpectedConditions.alertIsPresent());

	         WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
	         Alert alert = wait.until(ExpectedConditions.alertIsPresent());
		        
			  Assert.assertTrue(alert.getText().contains(alerttext));

			    alert.accept();
		 }
	     	catch(Exception e)
		  {
	     		 Assert.fail("Customer not added successfully");
		  }
		
		
		 
	}
	
	@DataProvider(name="LoginData")
	public String [][] getData() throws IOException
	{
		/*String loginData[][]= {
					{"admin@yourstore.com","admin","Valid"},
					{"admin@yourstore.com","adm","Invalid"},
					{"adm@yourstore.com","admin","Invalid"},
					{"adm@yourstore.com","adm","Invalid"}
							};*/
		
		//get the data from excel
		String path=".\\testData\\AddCustomers_LoginData.xlsx";
		XLUtility xlutil=new XLUtility(path);
		
		int totalrows=xlutil.getRowCount("Sheet1");
		int totalcols=xlutil.getCellCount("Sheet1",1);	
				
		String loginData[][]=new String[totalrows][totalcols];
			
		
		for(int i=1;i<=totalrows;i++) //1
		{
			for(int j=0;j<totalcols;j++) //0
			{
				loginData[i-1][j]=xlutil.getCellData("Sheet1", i, j);
			}
				
		}
		
		return loginData;
	}

}


				8.testng.xml
				-----------------

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Data Driven Test">
	 <listeners>
		<!-- <listener class-name="utilities.ExtentReportManager" />-->
		<listener class-name="org.uncommons.reportng.HTMLReporter" />
		<listener class-name="org.uncommons.reportng.JUnitXMLReporter" />
		<listener class-name="Listeners.CustomListeners" />
	</listeners>
	
  <test thread-count="5" name="LoginTest">
	   <parameter name="browser" value="chrome" />    <!-- passing browser parameter to BaseClass ->Setup() -->
    <classes>
  <!--    <class name="testCases.TC_001_LoginTest"/>  -->
    </classes>
  </test> <!-- Test -->
  
   <test thread-count="5" name="AddCustomerLoginTest">
	   <parameter name="browser" value="chrome" />    <!-- passing browser parameter to BaseClass ->Setup() -->
    <classes>
   <class name="testCases.TC_002_AddCustomerLoginTest"/> 
    </classes>
  </test> 
</suite>

				9.Maunal error.jpg added is not working(without timestamp)
				---------------------------------------------------------------




12. Capturing Unique screenshots and report customization part 2

		Add Above step 11 file inside file name is BaseClass.java remaining same.

		Date d = new Date();
		screenshotName = d.toString().replace(":", "_").replace(" ", "_")+".jpg";






13. Generating Extent Report
14. Adding steps to test cases in Extent Report
15. Creating a common data provider
16. Adding Multiple Failure to the test
17. Adding parameterization and automating the third test
18. Setting up run modes for test suites
19. Setting up run modes for test data and implementing parameterization
20. Jenkins build generation
21. Jenkins - Configuring HTML Publisher plugin for Extent Reports
22. Jenkins - Parameterizing the build for browser and environment
23. Jenkins - Configuring MAIL API to send test results in an automated email
